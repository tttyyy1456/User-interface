{"version":3,"sources":["Inventory/Constants/Constants.js","Inventory/Item/Item.js","Inventory/Cell/Cell.js","Inventory/MainWindow/MainWindow.js","Inventory/HumanEquip/HumanEquip.js","Inventory/QuickUse/QuickUse.js","Inventory.js","App.js","serviceWorker.js","index.js"],"names":["ItemTypes","Item","props","useDrag","item","type","posNumber","PositionNumber","collect","monitor","isDragging","drag","style","opacity","fontWeight","cursor","ref","className","id","name","Cell","hasItem","values","PosNumber","onChange","useDrop","accept","drop","currentPosition","itemFilter","filter","index","onDropped","isOver","position","width","height","map","items","Name","key","top","left","zIndex","backgroundColor","MainWindow","cells","toString","HumanEquip","QuickUse","Inventory","Change","setState","state","t","i","data","$values","this","React","Component","App","DndProvider","backend","HTML5Backend","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.5cc70967.chunk.js","sourcesContent":["export const ItemTypes = {\r\n  ITEM: 'item'\r\n}\r\n\r\n","import React, {useState, useRef} from 'react';\r\nimport { ItemTypes } from '../Constants/Constants.js';\r\nimport { useDrag, useDrop } from 'react-dnd';\r\n\r\n\r\nfunction Item(props) {\r\n\tconst [{ isDragging }, drag] = useDrag({\r\n  item: { \r\n    type: ItemTypes.ITEM,\r\n    posNumber: props.PositionNumber\r\n  },\r\n  collect: (monitor) => ({\r\n    isDragging: !!monitor.isDragging()\r\n  })\r\n})\r\n\r\n\treturn(\r\n                      <p \r\n                      \tstyle={{\r\n\t\t\t\t\t        opacity: isDragging ? 0 : 1,\r\n\t\t\t\t\t        fontWeight: 'bold',\r\n\t\t\t\t\t        cursor: 'pointer',\r\n     \t\t\t\t\t\t\t}} \r\n      \t\t\t\t\tref={drag} \r\n      \t\t\t\t\tclassName ='ma0 mw3 tc' \r\n      \t\t\t\t\tid = {props.id}>\r\n                                {props.name}\r\n\r\n      \t\t\t\t\t</p>\r\n\r\n\r\n\t\t\r\n\r\n\t\t)\r\n}\r\n\r\nexport default Item;","import React from 'react';\r\nimport './Cell.css'\r\nimport Item from '../Item/Item.js';\r\nimport { ItemTypes } from '../Constants/Constants.js';\r\nimport { useDrop } from 'react-dnd';\r\n\r\n\r\n\r\n\r\nconst Cell = ({hasItem,values, PosNumber, onChange}) =>{\r\n\r\n\t\tconst onDropped = (currentPosition) =>{\r\n\t\t\t\r\n\t\t\tconst itemFilter = values.filter((item, index) => values[index].PosNumber == currentPosition)\r\n\t\t\tif(hasItem === false){\r\n\r\n\t\t\titemFilter[0].PosNumber = PosNumber;\r\n\t\t\tonChange(currentPosition)\r\n\t\t\t}\r\n\r\n\r\n\t\t\r\n\r\n\r\n\t\t}\r\n\r\n\t\tconst [{ isOver }, drop] = useDrop({\r\n\t    accept: ItemTypes.ITEM,\r\n\t    drop: (item, monitor) => onDropped(item.posNumber),\r\n\t    collect: monitor => ({\r\n\t      isOver: !!monitor.isOver(),\r\n\t    }),\r\n\t  })\r\n\r\n\r\n\treturn(\r\n\t\t\t<div \r\n\t\t\tclassName = 'Cell' \r\n\t\t\tid = 'Cell'\r\n\t\t\tref={drop}\r\n\t\t\tstyle={{\r\n        position: 'relative',\r\n        width: '100%',\r\n        height: '100%',\r\n      }}\r\n\t\t\t>\r\n\r\n\t\t\r\n\r\n\t\t\t{\r\n\t\t\t\tvalues.map((items, index) =>{\r\n\t\t\t\t\tif(values[index].PosNumber == PosNumber){\r\n\t\t\t\t\t\thasItem = true\r\n\t\t\t\t\t\treturn (<Item\r\n\t\t\t\t\t\tPositionNumber = {values[index].PosNumber} \r\n\t\t\t\t\t\tname = {values[index].Name}\r\n\t\t\t\t\t\tid = 'Item'\r\n\t\t\t\t\t\tkey = 'key'\r\n\t\t\t\t\t\t/>\r\n\t\t\t\t\t\t)\r\n\t\t\t\t\t}\r\n\t\t\t\t})\r\n\t\t\t}\r\n\r\n\t\t\t{isOver && (\r\n        <div\r\n          style={{\r\n            position: 'absolute',\r\n            top: 0,\r\n            left: 0,\r\n            height: '100%',\r\n            width: '100%',\r\n            zIndex: 1,\r\n            opacity: 0.5,\r\n            backgroundColor: 'yellow',\r\n          }}\r\n        />\r\n      )}\t\t\t\t\r\n\t\t\t</div>\r\n\t\t\r\n\t\t)\r\n\t\t}\r\n\r\nexport default Cell;","import React from 'react';\r\nimport './MainWindow.css';\r\nimport Cell from '../Cell/Cell.js';\r\n\r\n\r\nconst MainWindow = ({hasItem, values, onChange, id, className}) =>{\r\n\tconst array = [1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40];\r\n\t\tconst cells = array.map((item, index) =>{\r\n\t\t\t\t\tif(index <40 ){\r\n\t\t\t\t\t\r\n\t\t\t\t\treturn <Cell \r\n\t\t\t\t\tkey = {item.toString()}\r\n\t\t\t\t\thasItem = {hasItem} \r\n\t\t\t\t\tvalues = {values} \r\n\t\t\t\t\tPosNumber = {index} \r\n\t\t\t\t\tonChange = {onChange}/>\r\n\t\t\t\t\t\r\n\t\t\t\t}\r\n\t\t\t})\r\n\r\n\r\n\r\n\treturn(\r\n\t\t<div \r\n\t\tid = {id}\r\n\t\tclassName={className} \r\n\t\t>\r\n\t\t{cells}\r\n\t\t\t\t\r\n\t\t\t\r\n\t\t\t\r\n\t\t</div>\r\n\t\t)\r\n}\r\n\r\nexport default MainWindow;","import React from 'react';\r\nimport './HumanEquip.css';\r\nimport Cell from '../Cell/Cell.js';\r\n\r\n\r\nconst HumanEquip = ({hasItem, values, onChange}) =>{\r\n\tconst array = [1,2,3,4,5,6,7,8,9,10,11,12,13,14,15];\r\n\t\tconst cells = array.map((item, index) =>{\r\n\t\t\t\t\tif(index < 15){\r\n\t\t\t\t\t\r\n\t\t\t\t\treturn <Cell \r\n\t\t\t\t\tkey = {item.toString()}\r\n\t\t\t\t\thasItem = {hasItem} \r\n\t\t\t\t\tvalues = {values} \r\n\t\t\t\t\tPosNumber = {index+44} \r\n\t\t\t\t\tonChange = {onChange}/>\r\n\t\t\t\t\t\r\n\t\t\t\t}\r\n\t\t\t})\r\n\treturn(\r\n\t\t<div className = 'main'>\r\n\t\t\t<div className = 'hat'>\r\n\t\t\t\t{cells[0]}\r\n\t\t\t</div>\r\n\t\t\t\t<div className = 'face-accessories'>\r\n\t\t\t\t\t{cells[1]}\r\n\t\t\t\t\t{cells[2]}\r\n\t\t\t\t\t{cells[3]}\r\n\t\t\t\t</div>\r\n\t\t\t\t\t<div className = 'necklace'>\r\n\t\t\t\t\t\t{cells[4]}\r\n\t\t\t\t\t</div>\r\n\t\t\t\t\t\t<div className = 'bodyequip'>\r\n\t\t\t\t\t\t\t{cells[5]}\r\n\t\t\t\t\t\t\t{cells[6]}\r\n\t\t\t\t\t\t\t{cells[7]}\r\n\t\t\t\t\t\t\t{cells[8]}\r\n\t\t\t\t\t\t</div>\r\n\t\t\t\t\t\t\t<div className ='bottom'>\r\n\t\t\t\t\t\t\t\t<div className ='left-arm'>\r\n\t\t\t\t\t\t\t\t\t{cells[9]}\r\n\t\t\t\t\t\t\t\t\t{cells[10]}\r\n\t\t\t\t\t\t\t\t</div>\r\n\t\t\t\t\t\t\t\t\t\t<div>\r\n\t\t\t\t\t\t\t\t\t\t\t{cells[11]}\r\n\t\t\t\t\t\t\t\t\t\t</div>\r\n\r\n\t\t\t\t\t\t\t\t<div className='right-arm'>\r\n\t\t\t\t\t\t\t\t\t{cells[12]}\r\n\t\t\t\t\t\t\t\t\t{cells[13]}\r\n\t\t\t\t\t\t\t\t</div>\r\n\t\t\t\t\t\t\t</div>\r\n\r\n\t\t\t\t\t\t\t\t<div className ='feet'>\r\n\t\t\t\t\t\t\t\t{cells[14]}\r\n\t\t\t\t\t\t\t\t</div>\r\n\r\n\t\t</div>\r\n\t\t)\r\n}\r\n\r\nexport default HumanEquip;","import React from 'react';\r\nimport './QuickUse.css';\r\nimport Cell from '../Cell/Cell.js';\r\n\r\n\r\n\r\nconst QuickUse = ({hasItem, values, onChange})=>{\r\n\tconst array = [1,2,3,4];\r\n\t\tconst cells = array.map((item, index) =>{\r\n\t\t\t\t\tif(index <4 ){\r\n\t\t\t\t\t\r\n\t\t\t\t\treturn <Cell \r\n\t\t\t\t\tkey = {item.toString()}\r\n\t\t\t\t\thasItem = {hasItem} \r\n\t\t\t\t\tvalues = {values} \r\n\t\t\t\t\tPosNumber = {index+40} \r\n\t\t\t\t\tonChange = {onChange}/>\r\n\t\t\t\t\t\r\n\t\t\t\t}\r\n\t\t\t})\r\n\treturn(\r\n\t\t<div className = 'QuickUse'>\r\n\t\t\t{cells}\r\n\t\t</div>\r\n\t\t\t\r\n\t\t)\r\n}\r\n\r\nexport default QuickUse;","import React from 'react';\r\nimport MainWindow from './Inventory/MainWindow/MainWindow.js';\r\nimport HumanEquip from './Inventory/HumanEquip/HumanEquip.js';\r\nimport './Inventory/HumanEquip/HumanEquip.css';\r\nimport Cell from './Inventory/Cell/Cell.js';\r\nimport './App.css';\r\nimport QuickUse from './Inventory/QuickUse/QuickUse.js';\r\nimport data from './message.json';\r\n\r\nlet hasItem = false;\r\n\r\n\r\nclass Inventory extends React.Component{\r\n\r\n\r\n\r\n\r\n\tconstructor(){\r\n\t\tsuper();\r\n\t\tthis.state = {\r\n\t\t\tvalues: [],\r\n\t\t};\r\n\r\n\r\n\r\n\t}\r\n\r\n\r\n\tcomponentDidMount(){\r\n\t\tdata.map((item, index) =>{\r\n\t\t\treturn this.setState({values: item.$values})\r\n\t\t})\r\n\t\t// fetch('http://localhost:3000/message.txt')\r\n\t\t// .then(response => response.json())\r\n\t\t//  .then(items => this.setState({values: items.$values}) )\r\n\t}\r\n\r\n\tChange = (id) =>{\r\n\t\tthis.setState({values: this.state.values.filter((t,i) => this.state.values[i].PosNumber !== id )})\r\n\t}\r\n\r\n\r\n\r\n\r\n\trender(){\r\n\t\tconst { values } = this.state\r\n\r\n\t\treturn(\r\n\r\n\t\t\t<div className ='inventory'>\r\n\t\t    \t<HumanEquip hasItem = {hasItem} onChange = {this.Change} values = {values}/>\r\n\t\t       \t\t<MainWindow hasItem = {hasItem} onChange = {this.Change} values = {values} id = 'MainWindow' className = 'MainWindow'/>\r\n\t       \t\t\t\t<QuickUse hasItem = {hasItem} onChange = {this.Change} values = {values}/>\r\n\r\n\t\t\t</div>\r\n\t\t\t)\r\n\t}\r\n}\r\n\r\nexport default Inventory;","import React from 'react';\r\nimport { DndProvider } from 'react-dnd';\r\nimport { HTML5Backend } from 'react-dnd-html5-backend';\r\nimport Inventory from './Inventory.js';\r\n\r\n\r\n\r\n\r\nclass App extends React.Component {\r\n\r\n\t\r\n  render(){\r\n\r\n\r\n  return (\r\n\r\n   \t \t<DndProvider backend={HTML5Backend}>\r\n   \t \t\t<Inventory/>\r\n\t    </DndProvider> \t\t\t\r\n  );\r\n\r\n  }\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' },\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then(registration => {\r\n        registration.unregister();\r\n      })\r\n      .catch(error => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport 'tachyons';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\n\r\n\r\nReactDOM.render(\r\n    <App/>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}